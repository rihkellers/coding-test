
CodingTest1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800200  000009aa  00000a3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000020f  00800238  00800238  00000a76  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000a76  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ad4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000b14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012bc  00000000  00000000  00000b64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d1c  00000000  00000000  00001e20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006e8  00000000  00000000  00002b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  00003224  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006c9  00000000  00000000  00003354  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000469  00000000  00000000  00003a1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00003e86  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	e7 c1       	rjmp	.+974    	; 0x434 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea ea       	ldi	r30, 0xAA	; 170
  fc:	f9 e0       	ldi	r31, 0x09	; 9
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 33       	cpi	r26, 0x38	; 56
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	24 e0       	ldi	r18, 0x04	; 4
 110:	a8 e3       	ldi	r26, 0x38	; 56
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a7 34       	cpi	r26, 0x47	; 71
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	f0 d1       	rcall	.+992    	; 0x500 <main>
 120:	42 c4       	rjmp	.+2180   	; 0x9a6 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <usart0_init>:
int pin_b_ms = 0;
int test_a = 0;

void usart0_init(void)
{
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);
 124:	e1 ec       	ldi	r30, 0xC1	; 193
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	88 69       	ori	r24, 0x98	; 152
 12c:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01);
 12e:	e2 ec       	ldi	r30, 0xC2	; 194
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	86 60       	ori	r24, 0x06	; 6
 136:	80 83       	st	Z, r24
		baudRate = F_CPU/(int)BAUDRATE/16-1;
	#else
		baudRate = F_CPU/9600/16-1;
	#endif

	UBRR0 = baudRate;
 138:	83 e3       	ldi	r24, 0x33	; 51
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 140:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 144:	08 95       	ret

00000146 <pinSetA_init>:
void pinSetA_init(void)
{
	#if defined(PINA_0)
	// Can be <= 7, but task required 4 alternatives
	if ((int)PINA_0 >= 0 && (int)PINA_0 <= 3) {
		outputPins ^= (0b00000001 << (int)PINA_0);
 146:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <outputPins>
 14a:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <outputPins+0x1>
		pin_a |= (0b00000001 << (int)PINA_0);
 14e:	20 91 3e 02 	lds	r18, 0x023E	; 0x80023e <pin_a>
 152:	30 91 3f 02 	lds	r19, 0x023F	; 0x80023f <pin_a+0x1>
 156:	22 60       	ori	r18, 0x02	; 2
 158:	30 93 3f 02 	sts	0x023F, r19	; 0x80023f <pin_a+0x1>
 15c:	20 93 3e 02 	sts	0x023E, r18	; 0x80023e <pin_a>
		pin_a |= 0b00000001;
	}
	#endif
	#if defined(PINA_1)
	if ((int)PINA_1 >= 0 && (int)PINA_1 <= 3) {
		outputPins ^= (0b00000001 << (int)PINA_1);
 160:	26 e0       	ldi	r18, 0x06	; 6
 162:	82 27       	eor	r24, r18
 164:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <outputPins+0x1>
 168:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <outputPins>
		pin_b |= (0b00000001 << (int)PINA_1);
 16c:	20 91 3a 02 	lds	r18, 0x023A	; 0x80023a <pin_b>
 170:	30 91 3b 02 	lds	r19, 0x023B	; 0x80023b <pin_b+0x1>
 174:	24 60       	ori	r18, 0x04	; 4
 176:	30 93 3b 02 	sts	0x023B, r19	; 0x80023b <pin_b+0x1>
 17a:	20 93 3a 02 	sts	0x023A, r18	; 0x80023a <pin_b>
	} else {
		outputPins ^= 0b00000010;
		pin_b |= 0b00000010;
	}
	#endif
	DDRA = outputPins;
 17e:	81 b9       	out	0x01, r24	; 1
 180:	08 95       	ret

00000182 <usart0_send>:
}

void usart0_send(char data)
{
	while (!(UCSR0A & (1 << UDRE0)));
 182:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 186:	95 ff       	sbrs	r25, 5
 188:	fc cf       	rjmp	.-8      	; 0x182 <usart0_send>

	UDR0 = data;
 18a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 18e:	08 95       	ret

00000190 <usart0_sendString>:
}

void usart0_sendString(char *str)
{
 190:	0f 93       	push	r16
 192:	1f 93       	push	r17
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
 198:	8c 01       	movw	r16, r24
	for(size_t i = 0; i < strlen(str); i++)
 19a:	c0 e0       	ldi	r28, 0x00	; 0
 19c:	d0 e0       	ldi	r29, 0x00	; 0
 19e:	06 c0       	rjmp	.+12     	; 0x1ac <usart0_sendString+0x1c>
	{
		usart0_send(str[i]);
 1a0:	f8 01       	movw	r30, r16
 1a2:	ec 0f       	add	r30, r28
 1a4:	fd 1f       	adc	r31, r29
 1a6:	80 81       	ld	r24, Z
 1a8:	ec df       	rcall	.-40     	; 0x182 <usart0_send>
	UDR0 = data;
}

void usart0_sendString(char *str)
{
	for(size_t i = 0; i < strlen(str); i++)
 1aa:	21 96       	adiw	r28, 0x01	; 1
 1ac:	f8 01       	movw	r30, r16
 1ae:	01 90       	ld	r0, Z+
 1b0:	00 20       	and	r0, r0
 1b2:	e9 f7       	brne	.-6      	; 0x1ae <usart0_sendString+0x1e>
 1b4:	31 97       	sbiw	r30, 0x01	; 1
 1b6:	e0 1b       	sub	r30, r16
 1b8:	f1 0b       	sbc	r31, r17
 1ba:	ce 17       	cp	r28, r30
 1bc:	df 07       	cpc	r29, r31
 1be:	80 f3       	brcs	.-32     	; 0x1a0 <usart0_sendString+0x10>
	{
		usart0_send(str[i]);
	}
}
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	1f 91       	pop	r17
 1c6:	0f 91       	pop	r16
 1c8:	08 95       	ret

000001ca <parse_command>:

void parse_command(void)
{
 1ca:	6f 92       	push	r6
 1cc:	7f 92       	push	r7
 1ce:	8f 92       	push	r8
 1d0:	9f 92       	push	r9
 1d2:	af 92       	push	r10
 1d4:	bf 92       	push	r11
 1d6:	cf 92       	push	r12
 1d8:	df 92       	push	r13
 1da:	ef 92       	push	r14
 1dc:	ff 92       	push	r15
 1de:	0f 93       	push	r16
 1e0:	1f 93       	push	r17
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	cd b7       	in	r28, 0x3d	; 61
 1e8:	de b7       	in	r29, 0x3e	; 62
 1ea:	c4 50       	subi	r28, 0x04	; 4
 1ec:	d2 40       	sbci	r29, 0x02	; 2
 1ee:	0f b6       	in	r0, 0x3f	; 63
 1f0:	f8 94       	cli
 1f2:	de bf       	out	0x3e, r29	; 62
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	cd bf       	out	0x3d, r28	; 61
	bool mode_echo = false;
	int* duration = 0;
	int length = 0;
	int j;
	char copy[BUFFER_LENGTH];
	strcpy(copy, input_buffer);
 1f8:	65 e4       	ldi	r22, 0x45	; 69
 1fa:	72 e0       	ldi	r23, 0x02	; 2
 1fc:	ce 01       	movw	r24, r28
 1fe:	03 96       	adiw	r24, 0x03	; 3
 200:	26 d3       	rcall	.+1612   	; 0x84e <strcpy>

	usart0_sendString("\r\n");
 202:	8a e1       	ldi	r24, 0x1A	; 26
 204:	92 e0       	ldi	r25, 0x02	; 2
 206:	c4 df       	rcall	.-120    	; 0x190 <usart0_sendString>
	for (j = 1, str1 = input_buffer; ; j++, str1 = NULL) {
 208:	01 e0       	ldi	r16, 0x01	; 1
 20a:	10 e0       	ldi	r17, 0x00	; 0
	char *str1, *token;
	char *saveptr1;
	bool mode_set = false;
	bool mode_echo = false;
	int* duration = 0;
	int length = 0;
 20c:	c1 2c       	mov	r12, r1
 20e:	d1 2c       	mov	r13, r1
{
	char *str1, *token;
	char *saveptr1;
	bool mode_set = false;
	bool mode_echo = false;
	int* duration = 0;
 210:	a1 2c       	mov	r10, r1
 212:	b1 2c       	mov	r11, r1
void parse_command(void)
{
	char *str1, *token;
	char *saveptr1;
	bool mode_set = false;
	bool mode_echo = false;
 214:	61 2c       	mov	r6, r1

void parse_command(void)
{
	char *str1, *token;
	char *saveptr1;
	bool mode_set = false;
 216:	71 2c       	mov	r7, r1
	int j;
	char copy[BUFFER_LENGTH];
	strcpy(copy, input_buffer);

	usart0_sendString("\r\n");
	for (j = 1, str1 = input_buffer; ; j++, str1 = NULL) {
 218:	85 e4       	ldi	r24, 0x45	; 69
 21a:	92 e0       	ldi	r25, 0x02	; 2
		token = strtok_r(str1, " ,", &saveptr1);
 21c:	ae 01       	movw	r20, r28
 21e:	4f 5f       	subi	r20, 0xFF	; 255
 220:	5f 4f       	sbci	r21, 0xFF	; 255
 222:	60 e0       	ldi	r22, 0x00	; 0
 224:	72 e0       	ldi	r23, 0x02	; 2
 226:	43 d3       	rcall	.+1670   	; 0x8ae <strtok_r>
 228:	7c 01       	movw	r14, r24
		if (token == NULL) break;
 22a:	00 97       	sbiw	r24, 0x00	; 0
 22c:	09 f4       	brne	.+2      	; 0x230 <parse_command+0x66>
 22e:	ec c0       	rjmp	.+472    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>

		if (j == 1) {
 230:	01 30       	cpi	r16, 0x01	; 1
 232:	11 05       	cpc	r17, r1
			if (strcmp(token, "set-led") == 0) {
 234:	89 f4       	brne	.+34     	; 0x258 <parse_command+0x8e>
 236:	63 e0       	ldi	r22, 0x03	; 3
 238:	72 e0       	ldi	r23, 0x02	; 2
 23a:	00 d3       	rcall	.+1536   	; 0x83c <strcmp>
 23c:	89 2b       	or	r24, r25
 23e:	09 f4       	brne	.+2      	; 0x242 <parse_command+0x78>
				mode_set = true;
			} else if (strcmp(token, "echo") == 0) {
 240:	d9 c0       	rjmp	.+434    	; 0x3f4 <parse_command+0x22a>
 242:	6b e0       	ldi	r22, 0x0B	; 11
 244:	72 e0       	ldi	r23, 0x02	; 2
 246:	c7 01       	movw	r24, r14
 248:	f9 d2       	rcall	.+1522   	; 0x83c <strcmp>
 24a:	89 2b       	or	r24, r25
 24c:	09 f4       	brne	.+2      	; 0x250 <parse_command+0x86>
				mode_echo = true;
			} else {
				usart0_sendString("ERROR\r\n");
 24e:	d5 c0       	rjmp	.+426    	; 0x3fa <parse_command+0x230>
 250:	80 e1       	ldi	r24, 0x10	; 16
 252:	92 e0       	ldi	r25, 0x02	; 2
 254:	9d df       	rcall	.-198    	; 0x190 <usart0_sendString>
				break;
 256:	d8 c0       	rjmp	.+432    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
			}
		} else if (j == 2) {
 258:	02 30       	cpi	r16, 0x02	; 2
 25a:	11 05       	cpc	r17, r1
 25c:	09 f0       	breq	.+2      	; 0x260 <parse_command+0x96>
			if (mode_set) {
 25e:	48 c0       	rjmp	.+144    	; 0x2f0 <parse_command+0x126>
 260:	77 20       	and	r7, r7
				if (atoi(token) == 0) {
 262:	09 f1       	breq	.+66     	; 0x2a6 <parse_command+0xdc>
 264:	c6 d2       	rcall	.+1420   	; 0x7f2 <atoi>
 266:	00 97       	sbiw	r24, 0x00	; 0
 268:	61 f4       	brne	.+24     	; 0x282 <parse_command+0xb8>
					PORTA |= pin_a;
 26a:	92 b1       	in	r25, 0x02	; 2
 26c:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <pin_a>
 270:	89 2b       	or	r24, r25
 272:	82 b9       	out	0x02, r24	; 2
					duration = &pin_a_ms;
 274:	0f 2e       	mov	r0, r31
 276:	fc e3       	ldi	r31, 0x3C	; 60
 278:	af 2e       	mov	r10, r31
 27a:	f2 e0       	ldi	r31, 0x02	; 2
 27c:	bf 2e       	mov	r11, r31
 27e:	f0 2d       	mov	r31, r0
 280:	be c0       	rjmp	.+380    	; 0x3fe <parse_command+0x234>
				} else if (atoi(token) == 1) {
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	61 f4       	brne	.+24     	; 0x29e <parse_command+0xd4>
					PORTA |= pin_b;
 286:	92 b1       	in	r25, 0x02	; 2
 288:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <pin_b>
 28c:	89 2b       	or	r24, r25
 28e:	82 b9       	out	0x02, r24	; 2
					duration = &pin_b_ms;
 290:	0f 2e       	mov	r0, r31
 292:	f8 e3       	ldi	r31, 0x38	; 56
 294:	af 2e       	mov	r10, r31
 296:	f2 e0       	ldi	r31, 0x02	; 2
 298:	bf 2e       	mov	r11, r31
 29a:	f0 2d       	mov	r31, r0
				} else {
					usart0_sendString("ERROR\r\n");
 29c:	b0 c0       	rjmp	.+352    	; 0x3fe <parse_command+0x234>
 29e:	80 e1       	ldi	r24, 0x10	; 16
 2a0:	92 e0       	ldi	r25, 0x02	; 2
 2a2:	76 df       	rcall	.-276    	; 0x190 <usart0_sendString>
					break;
 2a4:	b1 c0       	rjmp	.+354    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
				}
			} else if (mode_echo) {
 2a6:	66 20       	and	r6, r6
 2a8:	09 f4       	brne	.+2      	; 0x2ac <parse_command+0xe2>
				char *temp;
				long value = strtol(token,&temp,10);
 2aa:	a9 c0       	rjmp	.+338    	; 0x3fe <parse_command+0x234>
 2ac:	4a e0       	ldi	r20, 0x0A	; 10
 2ae:	50 e0       	ldi	r21, 0x00	; 0
 2b0:	be 01       	movw	r22, r28
 2b2:	6d 5f       	subi	r22, 0xFD	; 253
 2b4:	7d 4f       	sbci	r23, 0xFD	; 253
 2b6:	72 d1       	rcall	.+740    	; 0x59c <strtol>
				if (temp != token && *temp == '\0') {
 2b8:	cd 5f       	subi	r28, 0xFD	; 253
 2ba:	dd 4f       	sbci	r29, 0xFD	; 253
 2bc:	e8 81       	ld	r30, Y
 2be:	f9 81       	ldd	r31, Y+1	; 0x01
 2c0:	c3 50       	subi	r28, 0x03	; 3
 2c2:	d2 40       	sbci	r29, 0x02	; 2
 2c4:	ee 16       	cp	r14, r30
 2c6:	ff 06       	cpc	r15, r31
 2c8:	79 f0       	breq	.+30     	; 0x2e8 <parse_command+0x11e>
 2ca:	20 81       	ld	r18, Z
 2cc:	21 11       	cpse	r18, r1
 2ce:	0c c0       	rjmp	.+24     	; 0x2e8 <parse_command+0x11e>
					if (value >= 0 && value <= 300) {
 2d0:	6d 32       	cpi	r22, 0x2D	; 45
 2d2:	21 e0       	ldi	r18, 0x01	; 1
 2d4:	72 07       	cpc	r23, r18
 2d6:	81 05       	cpc	r24, r1
 2d8:	91 05       	cpc	r25, r1
						length = value;
 2da:	10 f4       	brcc	.+4      	; 0x2e0 <parse_command+0x116>
 2dc:	6b 01       	movw	r12, r22
					} else {
						usart0_sendString("ERROR\r\n");
 2de:	8f c0       	rjmp	.+286    	; 0x3fe <parse_command+0x234>
 2e0:	80 e1       	ldi	r24, 0x10	; 16
 2e2:	92 e0       	ldi	r25, 0x02	; 2
 2e4:	55 df       	rcall	.-342    	; 0x190 <usart0_sendString>
						break;
 2e6:	90 c0       	rjmp	.+288    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
					}
				} else {
					usart0_sendString("ERROR\r\n");
 2e8:	80 e1       	ldi	r24, 0x10	; 16
 2ea:	92 e0       	ldi	r25, 0x02	; 2
 2ec:	51 df       	rcall	.-350    	; 0x190 <usart0_sendString>
					break;
 2ee:	8c c0       	rjmp	.+280    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
				}
			}
		} else if (j == 3) {
 2f0:	03 30       	cpi	r16, 0x03	; 3
 2f2:	11 05       	cpc	r17, r1
 2f4:	09 f0       	breq	.+2      	; 0x2f8 <parse_command+0x12e>
 2f6:	83 c0       	rjmp	.+262    	; 0x3fe <parse_command+0x234>
			if (mode_set) {
 2f8:	77 20       	and	r7, r7
 2fa:	a1 f1       	breq	.+104    	; 0x364 <parse_command+0x19a>
				char *temp;
				token[strcspn(token, "\r")] = 0;
 2fc:	68 e2       	ldi	r22, 0x28	; 40
 2fe:	72 e0       	ldi	r23, 0x02	; 2
 300:	ad d2       	rcall	.+1370   	; 0x85c <strcspn>
 302:	8e 0d       	add	r24, r14
 304:	9f 1d       	adc	r25, r15
 306:	fc 01       	movw	r30, r24
 308:	10 82       	st	Z, r1
				long value = strtol(token,&temp,10);
 30a:	4a e0       	ldi	r20, 0x0A	; 10
 30c:	50 e0       	ldi	r21, 0x00	; 0
 30e:	be 01       	movw	r22, r28
 310:	6d 5f       	subi	r22, 0xFD	; 253
 312:	7d 4f       	sbci	r23, 0xFD	; 253
 314:	c7 01       	movw	r24, r14
 316:	42 d1       	rcall	.+644    	; 0x59c <strtol>
 318:	cd 5f       	subi	r28, 0xFD	; 253
				if (temp != token && *temp == '\0') {
 31a:	dd 4f       	sbci	r29, 0xFD	; 253
 31c:	e8 81       	ld	r30, Y
 31e:	f9 81       	ldd	r31, Y+1	; 0x01
 320:	c3 50       	subi	r28, 0x03	; 3
 322:	d2 40       	sbci	r29, 0x02	; 2
 324:	ee 16       	cp	r14, r30
 326:	ff 06       	cpc	r15, r31
 328:	c9 f0       	breq	.+50     	; 0x35c <parse_command+0x192>
 32a:	20 81       	ld	r18, Z
 32c:	21 11       	cpse	r18, r1
 32e:	16 c0       	rjmp	.+44     	; 0x35c <parse_command+0x192>
 330:	9b 01       	movw	r18, r22
					if (value >= 1 && value < 5000) {
 332:	ac 01       	movw	r20, r24
 334:	21 50       	subi	r18, 0x01	; 1
 336:	31 09       	sbc	r19, r1
 338:	41 09       	sbc	r20, r1
 33a:	51 09       	sbc	r21, r1
 33c:	27 38       	cpi	r18, 0x87	; 135
 33e:	33 41       	sbci	r19, 0x13	; 19
 340:	41 05       	cpc	r20, r1
 342:	51 05       	cpc	r21, r1
						*duration = value;
 344:	38 f4       	brcc	.+14     	; 0x354 <parse_command+0x18a>
 346:	f5 01       	movw	r30, r10
						usart0_sendString("OK\r\n");
 348:	71 83       	std	Z+1, r23	; 0x01
 34a:	60 83       	st	Z, r22
 34c:	88 e1       	ldi	r24, 0x18	; 24
 34e:	92 e0       	ldi	r25, 0x02	; 2
 350:	1f df       	rcall	.-450    	; 0x190 <usart0_sendString>
					} else {
						usart0_sendString("ERROR\r\n");
 352:	55 c0       	rjmp	.+170    	; 0x3fe <parse_command+0x234>
 354:	80 e1       	ldi	r24, 0x10	; 16
 356:	92 e0       	ldi	r25, 0x02	; 2
						break;
 358:	1b df       	rcall	.-458    	; 0x190 <usart0_sendString>
					}
				} else {
					usart0_sendString("ERROR\r\n");
 35a:	56 c0       	rjmp	.+172    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 35c:	80 e1       	ldi	r24, 0x10	; 16
 35e:	92 e0       	ldi	r25, 0x02	; 2
 360:	17 df       	rcall	.-466    	; 0x190 <usart0_sendString>
					break;
 362:	52 c0       	rjmp	.+164    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
				}
			} else if (mode_echo) {			
 364:	66 20       	and	r6, r6
 366:	09 f4       	brne	.+2      	; 0x36a <parse_command+0x1a0>
 368:	4a c0       	rjmp	.+148    	; 0x3fe <parse_command+0x234>
				char *dest = strstr(copy, token);
 36a:	4e 01       	movw	r8, r28
 36c:	f3 e0       	ldi	r31, 0x03	; 3
 36e:	8f 0e       	add	r8, r31
 370:	91 1c       	adc	r9, r1
 372:	bc 01       	movw	r22, r24
 374:	c4 01       	movw	r24, r8
 376:	81 d2       	rcall	.+1282   	; 0x87a <strstr>
 378:	7c 01       	movw	r14, r24
				
				int pos = dest - copy;
 37a:	e8 18       	sub	r14, r8
 37c:	f9 08       	sbc	r15, r9
 37e:	2a c0       	rjmp	.+84     	; 0x3d4 <parse_command+0x20a>
				while ((input_buffer[pos] != '\r') && length != 0) {
 380:	8c 35       	cpi	r24, 0x5C	; 92
					if (input_buffer[pos] == '\\' && input_buffer[pos+1] == 'x') {
 382:	09 f5       	brne	.+66     	; 0x3c6 <parse_command+0x1fc>
 384:	f7 01       	movw	r30, r14
 386:	ea 5b       	subi	r30, 0xBA	; 186
 388:	fd 4f       	sbci	r31, 0xFD	; 253
 38a:	90 81       	ld	r25, Z
 38c:	98 37       	cpi	r25, 0x78	; 120
 38e:	d9 f4       	brne	.+54     	; 0x3c6 <parse_command+0x1fc>
 390:	0d c0       	rjmp	.+26     	; 0x3ac <parse_command+0x1e2>
						for (int i = 0; i <= 3; i++) {
							if(input_buffer[pos+i] != '\r') {
 392:	f7 01       	movw	r30, r14
 394:	e8 0d       	add	r30, r8
 396:	f9 1d       	adc	r31, r9
 398:	eb 5b       	subi	r30, 0xBB	; 187
 39a:	fd 4f       	sbci	r31, 0xFD	; 253
 39c:	80 81       	ld	r24, Z
 39e:	8d 30       	cpi	r24, 0x0D	; 13
 3a0:	59 f0       	breq	.+22     	; 0x3b8 <parse_command+0x1ee>
								usart0_send(input_buffer[pos+i]);
 3a2:	ef de       	rcall	.-546    	; 0x182 <usart0_send>
				char *dest = strstr(copy, token);
				
				int pos = dest - copy;
				while ((input_buffer[pos] != '\r') && length != 0) {
					if (input_buffer[pos] == '\\' && input_buffer[pos+1] == 'x') {
						for (int i = 0; i <= 3; i++) {
 3a4:	2f ef       	ldi	r18, 0xFF	; 255
 3a6:	82 1a       	sub	r8, r18
 3a8:	92 0a       	sbc	r9, r18
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <parse_command+0x1e6>
 3ac:	81 2c       	mov	r8, r1
 3ae:	91 2c       	mov	r9, r1
 3b0:	84 e0       	ldi	r24, 0x04	; 4
 3b2:	88 16       	cp	r8, r24
 3b4:	91 04       	cpc	r9, r1
 3b6:	6c f3       	brlt	.-38     	; 0x392 <parse_command+0x1c8>
								usart0_send(input_buffer[pos+i]);
							} else {
								break;
							}
						}
						length--;
 3b8:	e1 e0       	ldi	r30, 0x01	; 1
 3ba:	ce 1a       	sub	r12, r30
 3bc:	d1 08       	sbc	r13, r1
						pos = pos+4;
 3be:	f4 e0       	ldi	r31, 0x04	; 4
 3c0:	ef 0e       	add	r14, r31
 3c2:	f1 1c       	adc	r15, r1
 3c4:	07 c0       	rjmp	.+14     	; 0x3d4 <parse_command+0x20a>
					} else {
						usart0_send(input_buffer[pos]);
 3c6:	dd de       	rcall	.-582    	; 0x182 <usart0_send>
						length--;
 3c8:	21 e0       	ldi	r18, 0x01	; 1
 3ca:	c2 1a       	sub	r12, r18
						pos++;
 3cc:	d1 08       	sbc	r13, r1
 3ce:	8f ef       	ldi	r24, 0xFF	; 255
 3d0:	e8 1a       	sub	r14, r24
				}
			} else if (mode_echo) {			
				char *dest = strstr(copy, token);
				
				int pos = dest - copy;
				while ((input_buffer[pos] != '\r') && length != 0) {
 3d2:	f8 0a       	sbc	r15, r24
 3d4:	f7 01       	movw	r30, r14
 3d6:	eb 5b       	subi	r30, 0xBB	; 187
 3d8:	fd 4f       	sbci	r31, 0xFD	; 253
 3da:	80 81       	ld	r24, Z
 3dc:	8d 30       	cpi	r24, 0x0D	; 13
 3de:	19 f0       	breq	.+6      	; 0x3e6 <parse_command+0x21c>
 3e0:	c1 14       	cp	r12, r1
 3e2:	d1 04       	cpc	r13, r1
						usart0_send(input_buffer[pos]);
						length--;
						pos++;
					}
				}
				usart0_sendString("\r\n");
 3e4:	69 f6       	brne	.-102    	; 0x380 <parse_command+0x1b6>
 3e6:	8a e1       	ldi	r24, 0x1A	; 26
 3e8:	92 e0       	ldi	r25, 0x02	; 2
 3ea:	d2 de       	rcall	.-604    	; 0x190 <usart0_sendString>
				usart0_sendString("OK\r\n");
 3ec:	88 e1       	ldi	r24, 0x18	; 24
 3ee:	92 e0       	ldi	r25, 0x02	; 2
 3f0:	cf de       	rcall	.-610    	; 0x190 <usart0_sendString>
 3f2:	05 c0       	rjmp	.+10     	; 0x3fe <parse_command+0x234>
 3f4:	77 24       	eor	r7, r7
		token = strtok_r(str1, " ,", &saveptr1);
		if (token == NULL) break;

		if (j == 1) {
			if (strcmp(token, "set-led") == 0) {
				mode_set = true;
 3f6:	73 94       	inc	r7
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <parse_command+0x234>
 3fa:	66 24       	eor	r6, r6
			} else if (strcmp(token, "echo") == 0) {
				mode_echo = true;
 3fc:	63 94       	inc	r6
 3fe:	0f 5f       	subi	r16, 0xFF	; 255
	int j;
	char copy[BUFFER_LENGTH];
	strcpy(copy, input_buffer);

	usart0_sendString("\r\n");
	for (j = 1, str1 = input_buffer; ; j++, str1 = NULL) {
 400:	1f 4f       	sbci	r17, 0xFF	; 255
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	0a cf       	rjmp	.-492    	; 0x21c <parse_command+0x52>
				}
				usart0_sendString("\r\n");
				usart0_sendString("OK\r\n");
			}
		}
	}
 408:	cc 5f       	subi	r28, 0xFC	; 252
}
 40a:	dd 4f       	sbci	r29, 0xFD	; 253
 40c:	0f b6       	in	r0, 0x3f	; 63
 40e:	f8 94       	cli
 410:	de bf       	out	0x3e, r29	; 62
 412:	0f be       	out	0x3f, r0	; 63
 414:	cd bf       	out	0x3d, r28	; 61
 416:	df 91       	pop	r29
 418:	cf 91       	pop	r28
 41a:	1f 91       	pop	r17
 41c:	0f 91       	pop	r16
 41e:	ff 90       	pop	r15
 420:	ef 90       	pop	r14
 422:	df 90       	pop	r13
 424:	cf 90       	pop	r12
 426:	bf 90       	pop	r11
 428:	af 90       	pop	r10
 42a:	9f 90       	pop	r9
 42c:	8f 90       	pop	r8
 42e:	7f 90       	pop	r7
 430:	6f 90       	pop	r6
 432:	08 95       	ret

00000434 <__vector_25>:
 434:	1f 92       	push	r1

ISR(USART0_RX_vect) {
 436:	0f 92       	push	r0
 438:	0f b6       	in	r0, 0x3f	; 63
 43a:	0f 92       	push	r0
 43c:	11 24       	eor	r1, r1
 43e:	0b b6       	in	r0, 0x3b	; 59
 440:	0f 92       	push	r0
 442:	2f 93       	push	r18
 444:	3f 93       	push	r19
 446:	4f 93       	push	r20
 448:	5f 93       	push	r21
 44a:	6f 93       	push	r22
 44c:	7f 93       	push	r23
 44e:	8f 93       	push	r24
 450:	9f 93       	push	r25
 452:	af 93       	push	r26
 454:	bf 93       	push	r27
 456:	ef 93       	push	r30
 458:	ff 93       	push	r31
	input_buffer[read_spot] = UDR0;
 45a:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <read_spot>
 45e:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <read_spot+0x1>
 462:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 466:	fc 01       	movw	r30, r24
 468:	eb 5b       	subi	r30, 0xBB	; 187
 46a:	fd 4f       	sbci	r31, 0xFD	; 253
 46c:	20 83       	st	Z, r18
	read_spot++;
 46e:	01 96       	adiw	r24, 0x01	; 1
 470:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <read_spot+0x1>
 474:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <read_spot>
	if (read_spot == BUFFER_LENGTH) read_spot = 0;
 478:	81 15       	cp	r24, r1
 47a:	92 40       	sbci	r25, 0x02	; 2
 47c:	21 f4       	brne	.+8      	; 0x486 <__vector_25+0x52>
 47e:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <read_spot+0x1>
 482:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <read_spot>
	UDR0 = input_buffer[read_spot-1];
 486:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <read_spot>
 48a:	f0 91 43 02 	lds	r31, 0x0243	; 0x800243 <read_spot+0x1>
 48e:	ec 5b       	subi	r30, 0xBC	; 188
 490:	fd 4f       	sbci	r31, 0xFD	; 253
 492:	80 81       	ld	r24, Z
 494:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	
	if ((input_buffer[read_spot - 1] == '\r') || (input_buffer[read_spot - 2] == '\r')) {
 498:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <read_spot>
 49c:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <read_spot+0x1>
 4a0:	fc 01       	movw	r30, r24
 4a2:	ec 5b       	subi	r30, 0xBC	; 188
 4a4:	fd 4f       	sbci	r31, 0xFD	; 253
 4a6:	20 81       	ld	r18, Z
 4a8:	2d 30       	cpi	r18, 0x0D	; 13
 4aa:	31 f0       	breq	.+12     	; 0x4b8 <__vector_25+0x84>
 4ac:	fc 01       	movw	r30, r24
 4ae:	ed 5b       	subi	r30, 0xBD	; 189
 4b0:	fd 4f       	sbci	r31, 0xFD	; 253
 4b2:	80 81       	ld	r24, Z
 4b4:	8d 30       	cpi	r24, 0x0D	; 13
 4b6:	89 f4       	brne	.+34     	; 0x4da <__vector_25+0xa6>
		cli();
 4b8:	f8 94       	cli
		parse_command();
 4ba:	87 de       	rcall	.-754    	; 0x1ca <parse_command>
		memset(input_buffer, 0, sizeof input_buffer);
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	92 e0       	ldi	r25, 0x02	; 2
 4c0:	e5 e4       	ldi	r30, 0x45	; 69
 4c2:	f2 e0       	ldi	r31, 0x02	; 2
 4c4:	df 01       	movw	r26, r30
 4c6:	9c 01       	movw	r18, r24
 4c8:	1d 92       	st	X+, r1
 4ca:	21 50       	subi	r18, 0x01	; 1
 4cc:	30 40       	sbci	r19, 0x00	; 0
 4ce:	e1 f7       	brne	.-8      	; 0x4c8 <__vector_25+0x94>
		read_spot = 0;
 4d0:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <read_spot+0x1>
 4d4:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <read_spot>
		sei();
 4d8:	78 94       	sei
	}
}
 4da:	ff 91       	pop	r31
 4dc:	ef 91       	pop	r30
 4de:	bf 91       	pop	r27
 4e0:	af 91       	pop	r26
 4e2:	9f 91       	pop	r25
 4e4:	8f 91       	pop	r24
 4e6:	7f 91       	pop	r23
 4e8:	6f 91       	pop	r22
 4ea:	5f 91       	pop	r21
 4ec:	4f 91       	pop	r20
 4ee:	3f 91       	pop	r19
 4f0:	2f 91       	pop	r18
 4f2:	0f 90       	pop	r0
 4f4:	0b be       	out	0x3b, r0	; 59
 4f6:	0f 90       	pop	r0
 4f8:	0f be       	out	0x3f, r0	; 63
 4fa:	0f 90       	pop	r0
 4fc:	1f 90       	pop	r1
 4fe:	18 95       	reti

00000500 <main>:

int main(void)
{
	usart0_init();
 500:	11 de       	rcall	.-990    	; 0x124 <usart0_init>
	pinSetA_init();
 502:	21 de       	rcall	.-958    	; 0x146 <pinSetA_init>
 504:	78 94       	sei
	sei();
 506:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <pin_a_ms>

    while (1) 
    {
		if (pin_a_ms == 0) {
 50a:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <pin_a_ms+0x1>
 50e:	00 97       	sbiw	r24, 0x00	; 0
 510:	a1 f4       	brne	.+40     	; 0x53a <main+0x3a>
 512:	82 b1       	in	r24, 0x02	; 2
			if (PORTA&pin_a) {
 514:	28 2f       	mov	r18, r24
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <pin_a>
 51c:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <pin_a+0x1>
 520:	82 23       	and	r24, r18
 522:	93 23       	and	r25, r19
 524:	89 2b       	or	r24, r25
 526:	89 f0       	breq	.+34     	; 0x54a <main+0x4a>
 528:	8d e1       	ldi	r24, 0x1D	; 29
				usart0_sendString("led-off: 0\n\r");
 52a:	92 e0       	ldi	r25, 0x02	; 2
 52c:	31 de       	rcall	.-926    	; 0x190 <usart0_sendString>
 52e:	92 b1       	in	r25, 0x02	; 2
				PORTA^=pin_a;
 530:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <pin_a>
 534:	89 27       	eor	r24, r25
 536:	82 b9       	out	0x02, r24	; 2
 538:	08 c0       	rjmp	.+16     	; 0x54a <main+0x4a>
 53a:	18 16       	cp	r1, r24
			}
		} else if (pin_a_ms > 0) {
 53c:	19 06       	cpc	r1, r25
 53e:	2c f4       	brge	.+10     	; 0x54a <main+0x4a>
 540:	01 97       	sbiw	r24, 0x01	; 1
			pin_a_ms--;
 542:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <pin_a_ms+0x1>
 546:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <pin_a_ms>
 54a:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <__data_end>
		}

		if (pin_b_ms == 0) {
 54e:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <__data_end+0x1>
 552:	00 97       	sbiw	r24, 0x00	; 0
 554:	a1 f4       	brne	.+40     	; 0x57e <main+0x7e>
 556:	82 b1       	in	r24, 0x02	; 2
			if (PORTA&pin_b) {
 558:	28 2f       	mov	r18, r24
 55a:	30 e0       	ldi	r19, 0x00	; 0
 55c:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <pin_b>
 560:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <pin_b+0x1>
 564:	82 23       	and	r24, r18
 566:	93 23       	and	r25, r19
 568:	89 2b       	or	r24, r25
 56a:	89 f0       	breq	.+34     	; 0x58e <main+0x8e>
				usart0_sendString("led-off: 1\n\r");
 56c:	8a e2       	ldi	r24, 0x2A	; 42
 56e:	92 e0       	ldi	r25, 0x02	; 2
 570:	0f de       	rcall	.-994    	; 0x190 <usart0_sendString>
 572:	92 b1       	in	r25, 0x02	; 2
				PORTA^=pin_b;
 574:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <pin_b>
 578:	89 27       	eor	r24, r25
 57a:	82 b9       	out	0x02, r24	; 2
 57c:	08 c0       	rjmp	.+16     	; 0x58e <main+0x8e>
 57e:	18 16       	cp	r1, r24
			}
		} else if (pin_b_ms > 0) {
 580:	19 06       	cpc	r1, r25
 582:	2c f4       	brge	.+10     	; 0x58e <main+0x8e>
 584:	01 97       	sbiw	r24, 0x01	; 1
			pin_b_ms--;
 586:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <__data_end+0x1>
 58a:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <__data_end>
 58e:	8f e9       	ldi	r24, 0x9F	; 159
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 590:	9f e0       	ldi	r25, 0x0F	; 15
 592:	01 97       	sbiw	r24, 0x01	; 1
 594:	f1 f7       	brne	.-4      	; 0x592 <main+0x92>
 596:	00 c0       	rjmp	.+0      	; 0x598 <main+0x98>
 598:	00 00       	nop
 59a:	b5 cf       	rjmp	.-150    	; 0x506 <main+0x6>

0000059c <strtol>:
 59c:	3f 92       	push	r3
 59e:	4f 92       	push	r4
 5a0:	5f 92       	push	r5
 5a2:	6f 92       	push	r6
 5a4:	7f 92       	push	r7
 5a6:	8f 92       	push	r8
 5a8:	9f 92       	push	r9
 5aa:	af 92       	push	r10
 5ac:	bf 92       	push	r11
 5ae:	cf 92       	push	r12
 5b0:	df 92       	push	r13
 5b2:	ef 92       	push	r14
 5b4:	ff 92       	push	r15
 5b6:	0f 93       	push	r16
 5b8:	1f 93       	push	r17
 5ba:	cf 93       	push	r28
 5bc:	df 93       	push	r29
 5be:	5c 01       	movw	r10, r24
 5c0:	6b 01       	movw	r12, r22
 5c2:	7a 01       	movw	r14, r20
 5c4:	61 15       	cp	r22, r1
 5c6:	71 05       	cpc	r23, r1
 5c8:	19 f0       	breq	.+6      	; 0x5d0 <strtol+0x34>
 5ca:	fb 01       	movw	r30, r22
 5cc:	91 83       	std	Z+1, r25	; 0x01
 5ce:	80 83       	st	Z, r24
 5d0:	e1 14       	cp	r14, r1
 5d2:	f1 04       	cpc	r15, r1
 5d4:	29 f0       	breq	.+10     	; 0x5e0 <strtol+0x44>
 5d6:	c7 01       	movw	r24, r14
 5d8:	02 97       	sbiw	r24, 0x02	; 2
 5da:	83 97       	sbiw	r24, 0x23	; 35
 5dc:	08 f0       	brcs	.+2      	; 0x5e0 <strtol+0x44>
 5de:	e2 c0       	rjmp	.+452    	; 0x7a4 <strtol+0x208>
 5e0:	e5 01       	movw	r28, r10
 5e2:	21 96       	adiw	r28, 0x01	; 1
 5e4:	f5 01       	movw	r30, r10
 5e6:	10 81       	ld	r17, Z
 5e8:	81 2f       	mov	r24, r17
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	1f d1       	rcall	.+574    	; 0x82c <isspace>
 5ee:	89 2b       	or	r24, r25
 5f0:	11 f0       	breq	.+4      	; 0x5f6 <strtol+0x5a>
 5f2:	5e 01       	movw	r10, r28
 5f4:	f5 cf       	rjmp	.-22     	; 0x5e0 <strtol+0x44>
 5f6:	1d 32       	cpi	r17, 0x2D	; 45
 5f8:	29 f4       	brne	.+10     	; 0x604 <strtol+0x68>
 5fa:	21 96       	adiw	r28, 0x01	; 1
 5fc:	f5 01       	movw	r30, r10
 5fe:	11 81       	ldd	r17, Z+1	; 0x01
 600:	01 e0       	ldi	r16, 0x01	; 1
 602:	07 c0       	rjmp	.+14     	; 0x612 <strtol+0x76>
 604:	1b 32       	cpi	r17, 0x2B	; 43
 606:	21 f4       	brne	.+8      	; 0x610 <strtol+0x74>
 608:	e5 01       	movw	r28, r10
 60a:	22 96       	adiw	r28, 0x02	; 2
 60c:	f5 01       	movw	r30, r10
 60e:	11 81       	ldd	r17, Z+1	; 0x01
 610:	00 e0       	ldi	r16, 0x00	; 0
 612:	e1 14       	cp	r14, r1
 614:	f1 04       	cpc	r15, r1
 616:	09 f1       	breq	.+66     	; 0x65a <strtol+0xbe>
 618:	f0 e1       	ldi	r31, 0x10	; 16
 61a:	ef 16       	cp	r14, r31
 61c:	f1 04       	cpc	r15, r1
 61e:	29 f4       	brne	.+10     	; 0x62a <strtol+0x8e>
 620:	3e c0       	rjmp	.+124    	; 0x69e <strtol+0x102>
 622:	10 e3       	ldi	r17, 0x30	; 48
 624:	e1 14       	cp	r14, r1
 626:	f1 04       	cpc	r15, r1
 628:	21 f1       	breq	.+72     	; 0x672 <strtol+0xd6>
 62a:	28 e0       	ldi	r18, 0x08	; 8
 62c:	e2 16       	cp	r14, r18
 62e:	f1 04       	cpc	r15, r1
 630:	01 f1       	breq	.+64     	; 0x672 <strtol+0xd6>
 632:	54 f4       	brge	.+20     	; 0x648 <strtol+0xac>
 634:	e2 e0       	ldi	r30, 0x02	; 2
 636:	ee 16       	cp	r14, r30
 638:	f1 04       	cpc	r15, r1
 63a:	21 f5       	brne	.+72     	; 0x684 <strtol+0xe8>
 63c:	81 2c       	mov	r8, r1
 63e:	91 2c       	mov	r9, r1
 640:	a1 2c       	mov	r10, r1
 642:	b0 e4       	ldi	r27, 0x40	; 64
 644:	bb 2e       	mov	r11, r27
 646:	3d c0       	rjmp	.+122    	; 0x6c2 <strtol+0x126>
 648:	fa e0       	ldi	r31, 0x0A	; 10
 64a:	ef 16       	cp	r14, r31
 64c:	f1 04       	cpc	r15, r1
 64e:	39 f0       	breq	.+14     	; 0x65e <strtol+0xc2>
 650:	20 e1       	ldi	r18, 0x10	; 16
 652:	e2 16       	cp	r14, r18
 654:	f1 04       	cpc	r15, r1
 656:	b1 f4       	brne	.+44     	; 0x684 <strtol+0xe8>
 658:	2f c0       	rjmp	.+94     	; 0x6b8 <strtol+0x11c>
 65a:	10 33       	cpi	r17, 0x30	; 48
 65c:	11 f1       	breq	.+68     	; 0x6a2 <strtol+0x106>
 65e:	fa e0       	ldi	r31, 0x0A	; 10
 660:	ef 2e       	mov	r14, r31
 662:	f1 2c       	mov	r15, r1
 664:	ac ec       	ldi	r26, 0xCC	; 204
 666:	8a 2e       	mov	r8, r26
 668:	98 2c       	mov	r9, r8
 66a:	a8 2c       	mov	r10, r8
 66c:	ac e0       	ldi	r26, 0x0C	; 12
 66e:	ba 2e       	mov	r11, r26
 670:	28 c0       	rjmp	.+80     	; 0x6c2 <strtol+0x126>
 672:	78 e0       	ldi	r23, 0x08	; 8
 674:	e7 2e       	mov	r14, r23
 676:	f1 2c       	mov	r15, r1
 678:	81 2c       	mov	r8, r1
 67a:	91 2c       	mov	r9, r1
 67c:	a1 2c       	mov	r10, r1
 67e:	e0 e1       	ldi	r30, 0x10	; 16
 680:	be 2e       	mov	r11, r30
 682:	1f c0       	rjmp	.+62     	; 0x6c2 <strtol+0x126>
 684:	60 e0       	ldi	r22, 0x00	; 0
 686:	70 e0       	ldi	r23, 0x00	; 0
 688:	80 e0       	ldi	r24, 0x00	; 0
 68a:	90 e8       	ldi	r25, 0x80	; 128
 68c:	97 01       	movw	r18, r14
 68e:	0f 2c       	mov	r0, r15
 690:	00 0c       	add	r0, r0
 692:	44 0b       	sbc	r20, r20
 694:	55 0b       	sbc	r21, r21
 696:	4c d1       	rcall	.+664    	; 0x930 <__udivmodsi4>
 698:	49 01       	movw	r8, r18
 69a:	5a 01       	movw	r10, r20
 69c:	12 c0       	rjmp	.+36     	; 0x6c2 <strtol+0x126>
 69e:	10 33       	cpi	r17, 0x30	; 48
 6a0:	59 f4       	brne	.+22     	; 0x6b8 <strtol+0x11c>
 6a2:	88 81       	ld	r24, Y
 6a4:	8f 7d       	andi	r24, 0xDF	; 223
 6a6:	88 35       	cpi	r24, 0x58	; 88
 6a8:	09 f0       	breq	.+2      	; 0x6ac <strtol+0x110>
 6aa:	bb cf       	rjmp	.-138    	; 0x622 <strtol+0x86>
 6ac:	19 81       	ldd	r17, Y+1	; 0x01
 6ae:	22 96       	adiw	r28, 0x02	; 2
 6b0:	02 60       	ori	r16, 0x02	; 2
 6b2:	80 e1       	ldi	r24, 0x10	; 16
 6b4:	e8 2e       	mov	r14, r24
 6b6:	f1 2c       	mov	r15, r1
 6b8:	81 2c       	mov	r8, r1
 6ba:	91 2c       	mov	r9, r1
 6bc:	a1 2c       	mov	r10, r1
 6be:	68 e0       	ldi	r22, 0x08	; 8
 6c0:	b6 2e       	mov	r11, r22
 6c2:	40 e0       	ldi	r20, 0x00	; 0
 6c4:	60 e0       	ldi	r22, 0x00	; 0
 6c6:	70 e0       	ldi	r23, 0x00	; 0
 6c8:	cb 01       	movw	r24, r22
 6ca:	27 01       	movw	r4, r14
 6cc:	0f 2c       	mov	r0, r15
 6ce:	00 0c       	add	r0, r0
 6d0:	66 08       	sbc	r6, r6
 6d2:	77 08       	sbc	r7, r7
 6d4:	fe 01       	movw	r30, r28
 6d6:	50 ed       	ldi	r21, 0xD0	; 208
 6d8:	35 2e       	mov	r3, r21
 6da:	31 0e       	add	r3, r17
 6dc:	29 e0       	ldi	r18, 0x09	; 9
 6de:	23 15       	cp	r18, r3
 6e0:	70 f4       	brcc	.+28     	; 0x6fe <strtol+0x162>
 6e2:	2f eb       	ldi	r18, 0xBF	; 191
 6e4:	21 0f       	add	r18, r17
 6e6:	2a 31       	cpi	r18, 0x1A	; 26
 6e8:	18 f4       	brcc	.+6      	; 0x6f0 <strtol+0x154>
 6ea:	39 ec       	ldi	r19, 0xC9	; 201
 6ec:	33 2e       	mov	r3, r19
 6ee:	06 c0       	rjmp	.+12     	; 0x6fc <strtol+0x160>
 6f0:	2f e9       	ldi	r18, 0x9F	; 159
 6f2:	21 0f       	add	r18, r17
 6f4:	2a 31       	cpi	r18, 0x1A	; 26
 6f6:	10 f5       	brcc	.+68     	; 0x73c <strtol+0x1a0>
 6f8:	29 ea       	ldi	r18, 0xA9	; 169
 6fa:	32 2e       	mov	r3, r18
 6fc:	31 0e       	add	r3, r17
 6fe:	23 2d       	mov	r18, r3
 700:	30 e0       	ldi	r19, 0x00	; 0
 702:	2e 15       	cp	r18, r14
 704:	3f 05       	cpc	r19, r15
 706:	d4 f4       	brge	.+52     	; 0x73c <strtol+0x1a0>
 708:	47 fd       	sbrc	r20, 7
 70a:	15 c0       	rjmp	.+42     	; 0x736 <strtol+0x19a>
 70c:	86 16       	cp	r8, r22
 70e:	97 06       	cpc	r9, r23
 710:	a8 06       	cpc	r10, r24
 712:	b9 06       	cpc	r11, r25
 714:	68 f0       	brcs	.+26     	; 0x730 <strtol+0x194>
 716:	a3 01       	movw	r20, r6
 718:	92 01       	movw	r18, r4
 71a:	fb d0       	rcall	.+502    	; 0x912 <__mulsi3>
 71c:	63 0d       	add	r22, r3
 71e:	71 1d       	adc	r23, r1
 720:	81 1d       	adc	r24, r1
 722:	91 1d       	adc	r25, r1
 724:	61 30       	cpi	r22, 0x01	; 1
 726:	71 05       	cpc	r23, r1
 728:	81 05       	cpc	r24, r1
 72a:	20 e8       	ldi	r18, 0x80	; 128
 72c:	92 07       	cpc	r25, r18
 72e:	10 f0       	brcs	.+4      	; 0x734 <strtol+0x198>
 730:	4f ef       	ldi	r20, 0xFF	; 255
 732:	01 c0       	rjmp	.+2      	; 0x736 <strtol+0x19a>
 734:	41 e0       	ldi	r20, 0x01	; 1
 736:	21 96       	adiw	r28, 0x01	; 1
 738:	10 81       	ld	r17, Z
 73a:	cc cf       	rjmp	.-104    	; 0x6d4 <strtol+0x138>
 73c:	20 2f       	mov	r18, r16
 73e:	21 70       	andi	r18, 0x01	; 1
 740:	c1 14       	cp	r12, r1
 742:	d1 04       	cpc	r13, r1
 744:	71 f0       	breq	.+28     	; 0x762 <strtol+0x1c6>
 746:	44 23       	and	r20, r20
 748:	29 f0       	breq	.+10     	; 0x754 <strtol+0x1b8>
 74a:	21 97       	sbiw	r28, 0x01	; 1
 74c:	f6 01       	movw	r30, r12
 74e:	d1 83       	std	Z+1, r29	; 0x01
 750:	c0 83       	st	Z, r28
 752:	07 c0       	rjmp	.+14     	; 0x762 <strtol+0x1c6>
 754:	01 ff       	sbrs	r16, 1
 756:	19 c0       	rjmp	.+50     	; 0x78a <strtol+0x1ee>
 758:	22 97       	sbiw	r28, 0x02	; 2
 75a:	f6 01       	movw	r30, r12
 75c:	d1 83       	std	Z+1, r29	; 0x01
 75e:	c0 83       	st	Z, r28
 760:	14 c0       	rjmp	.+40     	; 0x78a <strtol+0x1ee>
 762:	47 ff       	sbrs	r20, 7
 764:	12 c0       	rjmp	.+36     	; 0x78a <strtol+0x1ee>
 766:	22 23       	and	r18, r18
 768:	29 f0       	breq	.+10     	; 0x774 <strtol+0x1d8>
 76a:	60 e0       	ldi	r22, 0x00	; 0
 76c:	70 e0       	ldi	r23, 0x00	; 0
 76e:	80 e0       	ldi	r24, 0x00	; 0
 770:	90 e8       	ldi	r25, 0x80	; 128
 772:	04 c0       	rjmp	.+8      	; 0x77c <strtol+0x1e0>
 774:	6f ef       	ldi	r22, 0xFF	; 255
 776:	7f ef       	ldi	r23, 0xFF	; 255
 778:	8f ef       	ldi	r24, 0xFF	; 255
 77a:	9f e7       	ldi	r25, 0x7F	; 127
 77c:	22 e2       	ldi	r18, 0x22	; 34
 77e:	30 e0       	ldi	r19, 0x00	; 0
 780:	30 93 46 04 	sts	0x0446, r19	; 0x800446 <errno+0x1>
 784:	20 93 45 04 	sts	0x0445, r18	; 0x800445 <errno>
 788:	09 c0       	rjmp	.+18     	; 0x79c <strtol+0x200>
 78a:	22 23       	and	r18, r18
 78c:	81 f0       	breq	.+32     	; 0x7ae <strtol+0x212>
 78e:	90 95       	com	r25
 790:	80 95       	com	r24
 792:	70 95       	com	r23
 794:	61 95       	neg	r22
 796:	7f 4f       	sbci	r23, 0xFF	; 255
 798:	8f 4f       	sbci	r24, 0xFF	; 255
 79a:	9f 4f       	sbci	r25, 0xFF	; 255
 79c:	46 2f       	mov	r20, r22
 79e:	37 2f       	mov	r19, r23
 7a0:	28 2f       	mov	r18, r24
 7a2:	12 c0       	rjmp	.+36     	; 0x7c8 <strtol+0x22c>
 7a4:	40 e0       	ldi	r20, 0x00	; 0
 7a6:	30 e0       	ldi	r19, 0x00	; 0
 7a8:	20 e0       	ldi	r18, 0x00	; 0
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	0d c0       	rjmp	.+26     	; 0x7c8 <strtol+0x22c>
 7ae:	97 ff       	sbrs	r25, 7
 7b0:	f5 cf       	rjmp	.-22     	; 0x79c <strtol+0x200>
 7b2:	82 e2       	ldi	r24, 0x22	; 34
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	90 93 46 04 	sts	0x0446, r25	; 0x800446 <errno+0x1>
 7ba:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <errno>
 7be:	6f ef       	ldi	r22, 0xFF	; 255
 7c0:	7f ef       	ldi	r23, 0xFF	; 255
 7c2:	8f ef       	ldi	r24, 0xFF	; 255
 7c4:	9f e7       	ldi	r25, 0x7F	; 127
 7c6:	ea cf       	rjmp	.-44     	; 0x79c <strtol+0x200>
 7c8:	64 2f       	mov	r22, r20
 7ca:	73 2f       	mov	r23, r19
 7cc:	82 2f       	mov	r24, r18
 7ce:	df 91       	pop	r29
 7d0:	cf 91       	pop	r28
 7d2:	1f 91       	pop	r17
 7d4:	0f 91       	pop	r16
 7d6:	ff 90       	pop	r15
 7d8:	ef 90       	pop	r14
 7da:	df 90       	pop	r13
 7dc:	cf 90       	pop	r12
 7de:	bf 90       	pop	r11
 7e0:	af 90       	pop	r10
 7e2:	9f 90       	pop	r9
 7e4:	8f 90       	pop	r8
 7e6:	7f 90       	pop	r7
 7e8:	6f 90       	pop	r6
 7ea:	5f 90       	pop	r5
 7ec:	4f 90       	pop	r4
 7ee:	3f 90       	pop	r3
 7f0:	08 95       	ret

000007f2 <atoi>:
 7f2:	fc 01       	movw	r30, r24
 7f4:	88 27       	eor	r24, r24
 7f6:	99 27       	eor	r25, r25
 7f8:	e8 94       	clt
 7fa:	21 91       	ld	r18, Z+
 7fc:	20 32       	cpi	r18, 0x20	; 32
 7fe:	e9 f3       	breq	.-6      	; 0x7fa <atoi+0x8>
 800:	29 30       	cpi	r18, 0x09	; 9
 802:	10 f0       	brcs	.+4      	; 0x808 <atoi+0x16>
 804:	2e 30       	cpi	r18, 0x0E	; 14
 806:	c8 f3       	brcs	.-14     	; 0x7fa <atoi+0x8>
 808:	2b 32       	cpi	r18, 0x2B	; 43
 80a:	39 f0       	breq	.+14     	; 0x81a <atoi+0x28>
 80c:	2d 32       	cpi	r18, 0x2D	; 45
 80e:	31 f4       	brne	.+12     	; 0x81c <atoi+0x2a>
 810:	68 94       	set
 812:	03 c0       	rjmp	.+6      	; 0x81a <atoi+0x28>
 814:	73 d0       	rcall	.+230    	; 0x8fc <__mulhi_const_10>
 816:	82 0f       	add	r24, r18
 818:	91 1d       	adc	r25, r1
 81a:	21 91       	ld	r18, Z+
 81c:	20 53       	subi	r18, 0x30	; 48
 81e:	2a 30       	cpi	r18, 0x0A	; 10
 820:	c8 f3       	brcs	.-14     	; 0x814 <atoi+0x22>
 822:	1e f4       	brtc	.+6      	; 0x82a <atoi+0x38>
 824:	90 95       	com	r25
 826:	81 95       	neg	r24
 828:	9f 4f       	sbci	r25, 0xFF	; 255
 82a:	08 95       	ret

0000082c <isspace>:
 82c:	91 11       	cpse	r25, r1
 82e:	6e c0       	rjmp	.+220    	; 0x90c <__ctype_isfalse>
 830:	80 32       	cpi	r24, 0x20	; 32
 832:	19 f0       	breq	.+6      	; 0x83a <isspace+0xe>
 834:	89 50       	subi	r24, 0x09	; 9
 836:	85 50       	subi	r24, 0x05	; 5
 838:	d0 f7       	brcc	.-12     	; 0x82e <isspace+0x2>
 83a:	08 95       	ret

0000083c <strcmp>:
 83c:	fb 01       	movw	r30, r22
 83e:	dc 01       	movw	r26, r24
 840:	8d 91       	ld	r24, X+
 842:	01 90       	ld	r0, Z+
 844:	80 19       	sub	r24, r0
 846:	01 10       	cpse	r0, r1
 848:	d9 f3       	breq	.-10     	; 0x840 <strcmp+0x4>
 84a:	99 0b       	sbc	r25, r25
 84c:	08 95       	ret

0000084e <strcpy>:
 84e:	fb 01       	movw	r30, r22
 850:	dc 01       	movw	r26, r24
 852:	01 90       	ld	r0, Z+
 854:	0d 92       	st	X+, r0
 856:	00 20       	and	r0, r0
 858:	e1 f7       	brne	.-8      	; 0x852 <strcpy+0x4>
 85a:	08 95       	ret

0000085c <strcspn>:
 85c:	dc 01       	movw	r26, r24
 85e:	5d 91       	ld	r21, X+
 860:	55 23       	and	r21, r21
 862:	31 f0       	breq	.+12     	; 0x870 <strcspn+0x14>
 864:	fb 01       	movw	r30, r22
 866:	01 90       	ld	r0, Z+
 868:	05 16       	cp	r0, r21
 86a:	01 10       	cpse	r0, r1
 86c:	e1 f7       	brne	.-8      	; 0x866 <strcspn+0xa>
 86e:	b9 f7       	brne	.-18     	; 0x85e <strcspn+0x2>
 870:	80 95       	com	r24
 872:	90 95       	com	r25
 874:	8a 0f       	add	r24, r26
 876:	9b 1f       	adc	r25, r27
 878:	08 95       	ret

0000087a <strstr>:
 87a:	fb 01       	movw	r30, r22
 87c:	51 91       	ld	r21, Z+
 87e:	55 23       	and	r21, r21
 880:	a9 f0       	breq	.+42     	; 0x8ac <strstr+0x32>
 882:	bf 01       	movw	r22, r30
 884:	dc 01       	movw	r26, r24
 886:	4d 91       	ld	r20, X+
 888:	45 17       	cp	r20, r21
 88a:	41 11       	cpse	r20, r1
 88c:	e1 f7       	brne	.-8      	; 0x886 <strstr+0xc>
 88e:	59 f4       	brne	.+22     	; 0x8a6 <strstr+0x2c>
 890:	cd 01       	movw	r24, r26
 892:	01 90       	ld	r0, Z+
 894:	00 20       	and	r0, r0
 896:	49 f0       	breq	.+18     	; 0x8aa <strstr+0x30>
 898:	4d 91       	ld	r20, X+
 89a:	40 15       	cp	r20, r0
 89c:	41 11       	cpse	r20, r1
 89e:	c9 f3       	breq	.-14     	; 0x892 <strstr+0x18>
 8a0:	fb 01       	movw	r30, r22
 8a2:	41 11       	cpse	r20, r1
 8a4:	ef cf       	rjmp	.-34     	; 0x884 <strstr+0xa>
 8a6:	81 e0       	ldi	r24, 0x01	; 1
 8a8:	90 e0       	ldi	r25, 0x00	; 0
 8aa:	01 97       	sbiw	r24, 0x01	; 1
 8ac:	08 95       	ret

000008ae <strtok_r>:
 8ae:	fa 01       	movw	r30, r20
 8b0:	a1 91       	ld	r26, Z+
 8b2:	b0 81       	ld	r27, Z
 8b4:	00 97       	sbiw	r24, 0x00	; 0
 8b6:	19 f4       	brne	.+6      	; 0x8be <strtok_r+0x10>
 8b8:	10 97       	sbiw	r26, 0x00	; 0
 8ba:	e1 f0       	breq	.+56     	; 0x8f4 <strtok_r+0x46>
 8bc:	cd 01       	movw	r24, r26
 8be:	dc 01       	movw	r26, r24
 8c0:	cd 01       	movw	r24, r26
 8c2:	0d 90       	ld	r0, X+
 8c4:	00 20       	and	r0, r0
 8c6:	11 f4       	brne	.+4      	; 0x8cc <strtok_r+0x1e>
 8c8:	c0 01       	movw	r24, r0
 8ca:	13 c0       	rjmp	.+38     	; 0x8f2 <strtok_r+0x44>
 8cc:	fb 01       	movw	r30, r22
 8ce:	21 91       	ld	r18, Z+
 8d0:	22 23       	and	r18, r18
 8d2:	19 f0       	breq	.+6      	; 0x8da <strtok_r+0x2c>
 8d4:	20 15       	cp	r18, r0
 8d6:	d9 f7       	brne	.-10     	; 0x8ce <strtok_r+0x20>
 8d8:	f3 cf       	rjmp	.-26     	; 0x8c0 <strtok_r+0x12>
 8da:	fb 01       	movw	r30, r22
 8dc:	21 91       	ld	r18, Z+
 8de:	20 15       	cp	r18, r0
 8e0:	19 f4       	brne	.+6      	; 0x8e8 <strtok_r+0x3a>
 8e2:	1e 92       	st	-X, r1
 8e4:	11 96       	adiw	r26, 0x01	; 1
 8e6:	06 c0       	rjmp	.+12     	; 0x8f4 <strtok_r+0x46>
 8e8:	22 23       	and	r18, r18
 8ea:	c1 f7       	brne	.-16     	; 0x8dc <strtok_r+0x2e>
 8ec:	0d 90       	ld	r0, X+
 8ee:	00 20       	and	r0, r0
 8f0:	a1 f7       	brne	.-24     	; 0x8da <strtok_r+0x2c>
 8f2:	d0 01       	movw	r26, r0
 8f4:	fa 01       	movw	r30, r20
 8f6:	a1 93       	st	Z+, r26
 8f8:	b0 83       	st	Z, r27
 8fa:	08 95       	ret

000008fc <__mulhi_const_10>:
 8fc:	7a e0       	ldi	r23, 0x0A	; 10
 8fe:	97 9f       	mul	r25, r23
 900:	90 2d       	mov	r25, r0
 902:	87 9f       	mul	r24, r23
 904:	80 2d       	mov	r24, r0
 906:	91 0d       	add	r25, r1
 908:	11 24       	eor	r1, r1
 90a:	08 95       	ret

0000090c <__ctype_isfalse>:
 90c:	99 27       	eor	r25, r25
 90e:	88 27       	eor	r24, r24

00000910 <__ctype_istrue>:
 910:	08 95       	ret

00000912 <__mulsi3>:
 912:	db 01       	movw	r26, r22
 914:	8f 93       	push	r24
 916:	9f 93       	push	r25
 918:	2d d0       	rcall	.+90     	; 0x974 <__muluhisi3>
 91a:	bf 91       	pop	r27
 91c:	af 91       	pop	r26
 91e:	a2 9f       	mul	r26, r18
 920:	80 0d       	add	r24, r0
 922:	91 1d       	adc	r25, r1
 924:	a3 9f       	mul	r26, r19
 926:	90 0d       	add	r25, r0
 928:	b2 9f       	mul	r27, r18
 92a:	90 0d       	add	r25, r0
 92c:	11 24       	eor	r1, r1
 92e:	08 95       	ret

00000930 <__udivmodsi4>:
 930:	a1 e2       	ldi	r26, 0x21	; 33
 932:	1a 2e       	mov	r1, r26
 934:	aa 1b       	sub	r26, r26
 936:	bb 1b       	sub	r27, r27
 938:	fd 01       	movw	r30, r26
 93a:	0d c0       	rjmp	.+26     	; 0x956 <__udivmodsi4_ep>

0000093c <__udivmodsi4_loop>:
 93c:	aa 1f       	adc	r26, r26
 93e:	bb 1f       	adc	r27, r27
 940:	ee 1f       	adc	r30, r30
 942:	ff 1f       	adc	r31, r31
 944:	a2 17       	cp	r26, r18
 946:	b3 07       	cpc	r27, r19
 948:	e4 07       	cpc	r30, r20
 94a:	f5 07       	cpc	r31, r21
 94c:	20 f0       	brcs	.+8      	; 0x956 <__udivmodsi4_ep>
 94e:	a2 1b       	sub	r26, r18
 950:	b3 0b       	sbc	r27, r19
 952:	e4 0b       	sbc	r30, r20
 954:	f5 0b       	sbc	r31, r21

00000956 <__udivmodsi4_ep>:
 956:	66 1f       	adc	r22, r22
 958:	77 1f       	adc	r23, r23
 95a:	88 1f       	adc	r24, r24
 95c:	99 1f       	adc	r25, r25
 95e:	1a 94       	dec	r1
 960:	69 f7       	brne	.-38     	; 0x93c <__udivmodsi4_loop>
 962:	60 95       	com	r22
 964:	70 95       	com	r23
 966:	80 95       	com	r24
 968:	90 95       	com	r25
 96a:	9b 01       	movw	r18, r22
 96c:	ac 01       	movw	r20, r24
 96e:	bd 01       	movw	r22, r26
 970:	cf 01       	movw	r24, r30
 972:	08 95       	ret

00000974 <__muluhisi3>:
 974:	09 d0       	rcall	.+18     	; 0x988 <__umulhisi3>
 976:	a5 9f       	mul	r26, r21
 978:	90 0d       	add	r25, r0
 97a:	b4 9f       	mul	r27, r20
 97c:	90 0d       	add	r25, r0
 97e:	a4 9f       	mul	r26, r20
 980:	80 0d       	add	r24, r0
 982:	91 1d       	adc	r25, r1
 984:	11 24       	eor	r1, r1
 986:	08 95       	ret

00000988 <__umulhisi3>:
 988:	a2 9f       	mul	r26, r18
 98a:	b0 01       	movw	r22, r0
 98c:	b3 9f       	mul	r27, r19
 98e:	c0 01       	movw	r24, r0
 990:	a3 9f       	mul	r26, r19
 992:	70 0d       	add	r23, r0
 994:	81 1d       	adc	r24, r1
 996:	11 24       	eor	r1, r1
 998:	91 1d       	adc	r25, r1
 99a:	b2 9f       	mul	r27, r18
 99c:	70 0d       	add	r23, r0
 99e:	81 1d       	adc	r24, r1
 9a0:	11 24       	eor	r1, r1
 9a2:	91 1d       	adc	r25, r1
 9a4:	08 95       	ret

000009a6 <_exit>:
 9a6:	f8 94       	cli

000009a8 <__stop_program>:
 9a8:	ff cf       	rjmp	.-2      	; 0x9a8 <__stop_program>
